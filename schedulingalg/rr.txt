#include <stdio.h>

struct Process {
    int pid;
    int burst_time;
    int remaining_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};

void executeRoundRobin(struct Process processes[], int n, int quantum) {
    int time = 0;
    int completed = 0;
    
    // Initialize remaining time
    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].waiting_time = 0;
    }
    
    // Execute processes until all are completed
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int execution_time = (processes[i].remaining_time < quantum) ? 
                                   processes[i].remaining_time : quantum;
                
                processes[i].remaining_time -= execution_time;
                time += execution_time;
                
                // Update waiting time for other processes
                for (int j = 0; j < n; j++) {
                    if (j != i && processes[j].remaining_time > 0 && 
                        processes[j].arrival_time <= time) {
                        processes[j].waiting_time += execution_time;
                    }
                }
                
                // If process completes
                if (processes[i].remaining_time == 0) {
                    completed++;
                    processes[i].turnaround_time = time - processes[i].arrival_time;
                }
            }
        }
    }
}

void displayResults(struct Process processes[], int n) {
    float avg_waiting = 0, avg_turnaround = 0;
    
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", 
               processes[i].pid, 
               processes[i].burst_time, 
               processes[i].waiting_time, 
               processes[i].turnaround_time);
        avg_waiting += processes[i].waiting_time;
        avg_turnaround += processes[i].turnaround_time;
    }
    
    printf("\nAverage Waiting Time: %.2f", avg_waiting/n);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround/n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    
    struct Process processes[n];
    
    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }
    
    executeRoundRobin(processes, n, quantum);
    displayResults(processes, n);
    
    return 0;
}